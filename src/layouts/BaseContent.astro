---
import BaseLayout from "./Base.astro";
---

<BaseLayout>
  <div class="gap-x-10 lg:flex lg:items-start">
    <slot name="toc" />
    <article class="flex-grow break-words" data-pagefind-body>
      <div id="hero">
        <slot name="hero" />
      </div>
      <slot />
    </article>
  </div>
  <button
    aria-label="Back to Top"
    class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-link data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
    data-show="false"
    id="to-top-btn"
    ><svg
      aria-hidden="true"
      class="h-6 w-6"
      fill="none"
      focusable="false"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  </button>
</BaseLayout>

<script>
  const scrollBtn = document.getElementById("to-top-btn");
  const targetHeader = document.getElementById("hero");

  function callback(entries) {
    entries.forEach((entry) => {
      // only show the scroll to top button when the heading is out of view
      scrollBtn.dataset.show = (!entry.isIntersecting).toString();
    });
  }

  scrollBtn.addEventListener("click", () => {
    document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
  });

  const observer = new IntersectionObserver(callback);
  observer.observe(targetHeader);
</script>
